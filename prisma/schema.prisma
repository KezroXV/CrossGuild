// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isAdmin       Boolean   @default(false)
  phone         String?   // Ce champ est correct, on garde phone plutôt que phoneNumber
  address       String?
  city          String?
  postalCode    String?
  country       String?
  createdAt     DateTime  @default(now())
  twoFactorEnabled  Boolean @default(false)
  twoFactorSecret   String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cart          Cart?
  reviews       Review[]
  role          Role?     @relation(fields: [roleId], references: [id])
  roleId        String?
  wishlistItems WishlistItem[]
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  total       Float
  status      String      @default("pending")
  isPaid      Boolean     @default(false)  // Ajout de ce champ manquant
  createdAt   DateTime    @default(now())
  orderNumber String?     // Ajouté un champ optionnel pour le numéro de commande
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, itemId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id])
  quantity  Int      @default(1)
  price     Float    // Prix au moment de l'achat
  createdAt DateTime @default(now())

  @@unique([orderId, itemId])
}

model Item {
  id            String      @id @default(cuid())
  name          String
  price         Float
  quantity      Int
  description   String?
  sku           String?     @unique
  slug          String      @unique
  isPublished   Boolean     @default(false)
  images        Image[]
  cartItems     CartItem[]
  orderItems    OrderItem[]
  categoryId    String?
  category      Category?   @relation(fields: [categoryId], references: [id])
  reviews       Review[]
  brandId       String?
  brand         Brand?      @relation(fields: [brandId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  topSelling    Int         @default(0)
  averageRating Float       @default(0.0)
  options       ItemOption[]
  cost          Float       @default(0.0)  // Coût du produit
  profit        Float?      // Profit unitaire calculé (price - cost)
  margin        Float?      // Marge en pourcentage ((price - cost) / price * 100)
  totalProfit   Float?      // Profit total basé sur les ventes (calculé par le système)
  wishlistItems WishlistItem[]
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, itemId])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Int // Note donnée par l'utilisateur (1 à 5 par exemple)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id])
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([email])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  description String?
  image       String?  // URL de l'image de la catégorie
  items       Item[]   // Garde la relation One-to-Many
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String[] // ["MANAGE_PRODUCTS", "MANAGE_CATEGORIES", "MANAGE_USERS", etc.]
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Brand {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  logo        String?  // URL du logo de la marque
  items       Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model ItemOption {
  id          String   @id @default(cuid())
  name        String   // ex: "Size" or "Color"
  values      String[] // ex: ["S", "M", "L"] or ["Red", "Blue", "Black"]
  itemId      String
  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model FAQ {
  id          String   @id @default(cuid())
  question    String
  answer      String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HeroContent {
  id                String   @id @default(cuid())
  tagline           String
  heading           String
  highlightedText   String
  description       String   @db.Text
  primaryButtonText String
  secondaryButtonText String
  backgroundImage   String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CategoryHeroContent {
  id                String   @id @default(cuid())
  heading           String
  highlightedText   String
  description       String   @db.Text
  buttonText        String
  backgroundImage   String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Offer {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  image       String
  buttonLabel String   @default("Free Delivery")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}