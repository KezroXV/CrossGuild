// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  isAdmin   Boolean  @default(false) // false = utilisateur, true = administrateur
  createdAt DateTime @default(now())
  orders    Order[]
  cart      Cart?
  reviews   Review[]
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  price       Float
  stock       Int
  images      String[]
  createdAt   DateTime   @default(now())
  category    Category   @relation(fields: [categoryId], references: [id])
  categoryId  Int
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  products    Product[]
}

model Order {
  id         Int        @id @default(autoincrement())
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  orderItems OrderItem[]
  totalPrice Float
  status     String     // ex: "pending", "shipped", "delivered"
  createdAt  DateTime   @default(now())
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int
  price      Float
}

model Cart {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
  items     CartItem[]
  updatedAt DateTime  @updatedAt
}


model CartItem {
  id         Int      @id @default(autoincrement())
  cart       Cart     @relation(fields: [cartId], references: [id])
  cartId     Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int
}

model Review {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
}
