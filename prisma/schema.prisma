// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isAdmin       Boolean   @default(false)
  role          Role?     @relation(fields: [roleId], references: [id])
  roleId        String?
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  cart          Cart?
  reviews       Review[]
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  items     Item[]
  total     Float
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model Cart {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  items  Item[]
}

model Item {
  id          String     @id @default(cuid())
  name        String
  price       Float
  quantity    Int
  description String?
  sku         String?    @unique // Stock Keeping Unit
  slug        String     @unique
  isPublished Boolean    @default(false)
  images      Image[]
  orderId     String?
  order       Order?     @relation(fields: [orderId], references: [id])
  cartId      String?
  cart        Cart?      @relation(fields: [cartId], references: [id])
  categoryId  String?    // Ajoute l'ID de la catégorie
  category    Category?  @relation(fields: [categoryId], references: [id]) // Relation Many-to-One
  reviews     Review[]
  brandId     String?
  brand       Brand?     @relation(fields: [brandId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  topSelling  Int        @default(0) // Changed to number to indicate top-selling rank
  averageRating Float    @default(0.0) // Nouvelle colonne pour la moyenne des ratings
  options     ItemOption[]
}

model Image {
  id        String   @id @default(cuid())
  url       String
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(cuid())
  content   String
  rating    Int // Note donnée par l'utilisateur (1 à 5 par exemple)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id])
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  description String?
  image       String?  // URL de l'image de la catégorie
  items       Item[]   // Garde la relation One-to-Many
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String[] // ["MANAGE_PRODUCTS", "MANAGE_CATEGORIES", "MANAGE_USERS", etc.]
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Brand {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  logo        String?  // URL du logo de la marque
  items       Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ItemOption {
  id          String   @id @default(cuid())
  name        String   // ex: "Size" or "Color"
  values      String[] // ex: ["S", "M", "L"] or ["Red", "Blue", "Black"]
  itemId      String
  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
}