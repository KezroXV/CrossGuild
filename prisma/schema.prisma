generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String         @id @default(cuid())
  email            String?        @unique
  password         String?
  name             String?
  isAdmin          Boolean        @default(false)
  createdAt        DateTime       @default(now())
  emailVerified    DateTime?
  image            String?
  roleId           String?
  address          String?
  city             String?
  country          String?
  phone            String?
  postalCode       String?
  twoFactorEnabled Boolean        @default(false)
  twoFactorSecret  String?
  accounts         Account[]
  cart             Cart?
  orders           Order[]
  reviews          Review[]
  sessions         Session[]
  role             Role?          @relation(fields: [roleId], references: [id])
  wishlistItems    WishlistItem[]
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  status      String      @default("pending")
  createdAt   DateTime    @default(now())
  total       Float
  address     String?
  city        String      @default("")
  country     String?
  firstName   String?
  isPaid      Boolean     @default(false)
  lastName    String?
  orderNumber String?
  phone       String?
  postalCode  String?
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  itemId    String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  item      Item     @relation(fields: [itemId], references: [id])

  @@unique([cartId, itemId])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  itemId    String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  item      Item     @relation(fields: [itemId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([orderId, itemId])
}

model Item {
  id            String         @id @default(cuid())
  name          String
  price         Float
  quantity      Int
  createdAt     DateTime       @default(now())
  description   String?
  isPublished   Boolean        @default(false)
  sku           String?        @unique
  slug          String         @unique
  updatedAt     DateTime       @updatedAt
  topSelling    Int            @default(0)
  brandId       String?
  averageRating Float          @default(0.0)
  categoryId    String?
  cost          Float          @default(0.0)
  margin        Float?
  profit        Float?
  totalProfit   Float?
  cartItems     CartItem[]
  images        Image[]
  brand         Brand?         @relation(fields: [brandId], references: [id])
  category      Category?      @relation(fields: [categoryId], references: [id])
  options       ItemOption[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  itemId    String
  createdAt DateTime @default(now())
  item      Item     @relation(fields: [itemId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  itemId    String
  createdAt DateTime @default(now())
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  rating    Int
  createdAt DateTime @default(now())
  content   String
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([email])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  image       String?
  items       Item[]
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model Brand {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  items       Item[]
}

model ItemOption {
  id     String   @id @default(cuid())
  name   String
  values String[]
  itemId String
  item   Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model FAQ {
  id          String   @id @default(cuid())
  question    String
  answer      String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HeroContent {
  id                  String   @id @default(cuid())
  tagline             String
  heading             String
  highlightedText     String
  description         String
  primaryButtonText   String
  secondaryButtonText String
  backgroundImage     String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model CategoryHeroContent {
  id              String   @id @default(cuid())
  heading         String
  highlightedText String
  description     String
  buttonText      String
  backgroundImage String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Offer {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String
  buttonLabel String   @default("Free Delivery")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ContactMessage {
  id         String   @id @default(cuid())
  name       String
  email      String
  subject    String
  message    String
  department String
  isResolved Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ContactInfo {
  id            String   @id @default(cuid())
  address       String
  city          String
  postalCode    String
  country       String
  phone1        String
  phone2        String?
  email1        String
  email2        String?
  businessHours String
  mapEmbedUrl   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SocialLinks {
  id        String   @id @default(cuid())
  facebook  String?
  twitter   String?
  instagram String?
  linkedin  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
